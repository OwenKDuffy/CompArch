----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 12.04.2018 02:00:57
-- Design Name: 
-- Module Name: Memory - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Memory is
    Port ( dataIn : in STD_LOGIC_VECTOR (15 downto 0);
           MW : in STD_LOGIC;
           AddressIn : in STD_LOGIC_VECTOR (15 downto 0);
           DataOut : out STD_LOGIC_VECTOR (15 downto 0)
           );
end Memory;

architecture Behavioral of Memory is

type mem_array is array(0 to 511) of std_logic_vector(15 downto 0);


begin
mem_process: process (AddressIn, dataIn)
    
   
    variable data_mem : mem_array := (
    
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --16
    x"0000",x"0000",x"0000",x"0000",   
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --32
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --48
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --64
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --80
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --96
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --112
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --128
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --144
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --160
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --176
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --192
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --208
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --224
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --240
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --256
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --272
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --288
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --304
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --320
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --336
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --352
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --368
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --384
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --400
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --416
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --432
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --448
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --464
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --480
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    --496
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000",
    x"0000",x"0000",x"0000",x"0000"
);

variable addr:integer;

begin 
    addr:=conv_integer(AddressIn(8 downto 0));
    if MW = '1' then
    data_mem(addr) := dataIn;
    
    elsif MW = '0' then
        DataOut <= data_mem(addr) after 10ns;
    end if;
end process;
end Behavioral;
